'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import {
  ArrowRight,
  ArrowLeft,
  Bell,
  Check,
  ChevronDown,
  Loader2,
  Sparkles
} from 'lucide-react';
import {
  CryptoIcon,
  WeatherIcon,
  StockIcon,
  FlightIcon,
  CurrencyIcon,
  BankIcon,
  DeliveryIcon,
  WebsiteIcon,
  EmailIcon,
  SmsIcon,
  TelegramIcon,
  WhatsAppIcon,
  SlackIcon,
  PushIcon
} from '@/components/icons/ServiceIcons';

interface Service {
  id: string;
  name: string;
  icon: React.FC<{className?: string; size?: number}>;
  fields: {
    asset?: string[];
    operators: string[];
    valueType: 'number' | 'percentage' | 'text' | 'boolean';
    valuePlaceholder: string;
    unit?: string;
  };
}

const services: Service[] = [
  {
    id: 'crypto',
    name: 'Cryptocurrency',
    icon: CryptoIcon,
    fields: {
      asset: ['Bitcoin', 'Ethereum', 'BNB', 'Cardano', 'Solana', 'XRP', 'Dogecoin'],
      operators: ['drops below', 'rises above', 'changes by'],
      valueType: 'number',
      valuePlaceholder: '60000',
      unit: 'USD'
    }
  },
  {
    id: 'weather',
    name: 'Weather',
    icon: WeatherIcon,
    fields: {
      asset: ['Baku', 'Ganja', 'Sumgait', 'Lankaran', 'Shaki'],
      operators: ['temperature above', 'temperature below', 'rain expected', 'snow expected'],
      valueType: 'number',
      valuePlaceholder: '25',
      unit: '°C'
    }
  },
  {
    id: 'stock',
    name: 'Stock Market',
    icon: StockIcon,
    fields: {
      asset: ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TSLA', 'META', 'NVDA'],
      operators: ['drops below', 'rises above', 'changes by'],
      valueType: 'number',
      valuePlaceholder: '150',
      unit: 'USD'
    }
  },
  {
    id: 'currency',
    name: 'Currency Exchange',
    icon: CurrencyIcon,
    fields: {
      asset: ['USD/AZN', 'EUR/AZN', 'GBP/AZN', 'RUB/AZN', 'TRY/AZN'],
      operators: ['drops below', 'rises above', 'changes by'],
      valueType: 'number',
      valuePlaceholder: '1.70',
      unit: ''
    }
  },
  {
    id: 'website',
    name: 'Website Monitor',
    icon: WebsiteIcon,
    fields: {
      operators: ['goes down', 'response time above', 'SSL expires in'],
      valueType: 'number',
      valuePlaceholder: '3',
      unit: 'seconds'
    }
  },
  {
    id: 'bank',
    name: 'Bank Transactions',
    icon: BankIcon,
    fields: {
      operators: ['transaction above', 'balance below', 'payment received'],
      valueType: 'number',
      valuePlaceholder: '500',
      unit: 'AZN'
    }
  }
];

interface Channel {
  id: string;
  name: string;
  icon: React.FC<{className?: string; size?: number}>;
  configured: boolean;
  value?: string;
}

export default function QuickSetup() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [step, setStep] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);

  // Alert data
  const [selectedService, setSelectedService] = useState<Service | null>(null);
  const [alertName, setAlertName] = useState('');
  const [selectedAsset, setSelectedAsset] = useState('');
  const [selectedOperator, setSelectedOperator] = useState('');
  const [alertValue, setAlertValue] = useState('');
  const [websiteUrl, setWebsiteUrl] = useState('');

  // Channels
  const [channels, setChannels] = useState<Channel[]>([
    { id: 'email', name: 'Email', icon: EmailIcon, configured: false },
    { id: 'sms', name: 'SMS', icon: SmsIcon, configured: false },
    { id: 'telegram', name: 'Telegram', icon: TelegramIcon, configured: false },
    { id: 'whatsapp', name: 'WhatsApp', icon: WhatsAppIcon, configured: false },
    { id: 'slack', name: 'Slack', icon: SlackIcon, configured: false },
    { id: 'push', name: 'Push', icon: PushIcon, configured: false }
  ]);
  const [selectedChannels, setSelectedChannels] = useState<string[]>(['email']);

  // Advanced settings
  const [checkFrequency, setCheckFrequency] = useState(300); // 5 minutes default
  const [isRecurring, setIsRecurring] = useState(true);

  // Initialize from URL params or localStorage
  useEffect(() => {
    const query = searchParams.get('q');
    const service = searchParams.get('service');

    if (service) {
      const foundService = services.find(s => s.id === service);
      if (foundService) {
        setSelectedService(foundService);
        setSelectedOperator(foundService.fields.operators[0]);
      }
    }

    if (query) {
      // Parse query to pre-fill fields
      parseQuery(query);
    }

    // Check for pending alert in localStorage (try-before-signup)
    const pendingAlert = localStorage.getItem('pendingAlert');
    if (pendingAlert) {
      const alert = JSON.parse(pendingAlert);
      if (alert.service) {
        const foundService = services.find(s => s.id === alert.service);
        if (foundService) {
          setSelectedService(foundService);
          setSelectedOperator(foundService.fields.operators[0]);
        }
      }
      if (alert.query) {
        parseQuery(alert.query);
      }
    }

    // Check user's configured channels
    checkUserChannels();
  }, [searchParams]);

  const parseQuery = (query: string) => {
    const queryLower = query.toLowerCase();

    // Try to extract values from natural language query
    if (queryLower.includes('bitcoin')) {
      setSelectedAsset('Bitcoin');
      const match = query.match(/\$?([\d,]+)/);
      if (match) {
        setAlertValue(match[1].replace(',', ''));
      }
    } else if (queryLower.includes('ethereum') || queryLower.includes('eth')) {
      setSelectedAsset('Ethereum');
    } else if (queryLower.includes('weather')) {
      if (queryLower.includes('baku')) setSelectedAsset('Baku');
    }

    // Generate alert name from query
    setAlertName(query.substring(0, 50));
  };

  const checkUserChannels = () => {
    // Check localStorage for user data (in real app, fetch from API)
    const user = localStorage.getItem('user');
    if (user) {
      const userData = JSON.parse(user);
      setChannels(prev => prev.map(channel => ({
        ...channel,
        configured: !!userData[channel.id],
        value: userData[channel.id]
      })));
    }

    // Default email from localStorage
    const email = localStorage.getItem('userEmail');
    if (email) {
      setChannels(prev => prev.map(channel =>
        channel.id === 'email'
          ? { ...channel, configured: true, value: email }
          : channel
      ));
    }
  };

  const handleServiceSelect = (service: Service) => {
    setSelectedService(service);
    setSelectedOperator(service.fields.operators[0]);
    if (service.fields.asset) {
      setSelectedAsset(service.fields.asset[0]);
    }
  };

  const toggleChannel = (channelId: string) => {
    setSelectedChannels(prev =>
      prev.includes(channelId)
        ? prev.filter(id => id !== channelId)
        : [...prev, channelId]
    );
  };

  const handleCreateAlert = async () => {
    setIsLoading(true);

    // Check if user is logged in
    const token = localStorage.getItem('token');

    if (!token) {
      // Store alert data for after signup
      const alertData = {
        service: selectedService?.id,
        name: alertName,
        asset: selectedAsset,
        operator: selectedOperator,
        value: alertValue,
        websiteUrl,
        channels: selectedChannels,
        checkFrequency,
        isRecurring
      };
      localStorage.setItem('pendingAlert', JSON.stringify(alertData));

      // Redirect to signup
      router.push('/register?return=/alerts/quick-setup');
      return;
    }

    // Create alert via API
    try {
      // API call here
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call

      // Success - redirect to dashboard
      router.push('/dashboard');
    } catch (error) {
      console.error('Failed to create alert:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const isStep1Valid = () => {
    if (!selectedService) return false;
    if (selectedService.id === 'website' && !websiteUrl) return false;
    if (!selectedOperator || !alertValue) return false;
    if (selectedService.fields.asset && !selectedAsset) return false;
    return true;
  };

  const isStep2Valid = () => {
    return selectedChannels.length > 0;
  };

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900 py-8">
      <div className="max-w-3xl mx-auto px-4">
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
              Step {step} of 2
            </span>
            <span className="text-sm text-gray-500 dark:text-gray-500">
              {step === 1 ? 'Configure Alert' : 'Choose Channels'}
            </span>
          </div>
          <div className="h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden">
            <div
              className="h-full bg-gradient-to-r from-[rgb(81,91,195)] to-indigo-400 transition-all duration-300"
              style={{ width: `${step * 50}%` }}
            />
          </div>
        </div>

        {/* Step 1: Configure Alert */}
        {step === 1 && (
          <div className="bg-white dark:bg-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
            <div className="mb-6">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                What do you want to monitor?
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                Set up your alert in seconds with smart defaults
              </p>
            </div>

            {/* Service Selection */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                Choose Service
              </label>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                {services.map(service => {
                  const Icon = service.icon;
                  return (
                    <button
                      key={service.id}
                      onClick={() => handleServiceSelect(service)}
                      className={`p-3 rounded-xl border-2 transition-all ${
                        selectedService?.id === service.id
                          ? 'border-[rgb(81,91,195)] bg-blue-50 dark:bg-blue-900/20'
                          : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                      }`}
                    >
                      <Icon className="w-6 h-6 mx-auto mb-1 text-gray-700 dark:text-gray-300" />
                      <span className="text-xs font-medium text-gray-700 dark:text-gray-300">
                        {service.name}
                      </span>
                    </button>
                  );
                })}
              </div>
            </div>

            {selectedService && (
              <>
                {/* Alert Name */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Alert Name
                  </label>
                  <input
                    type="text"
                    value={alertName}
                    onChange={(e) => setAlertName(e.target.value)}
                    placeholder={`My ${selectedService.name} Alert`}
                    className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[rgb(81,91,195)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
                  />
                </div>

                {/* Website URL for website monitoring */}
                {selectedService.id === 'website' && (
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Website URL
                    </label>
                    <input
                      type="url"
                      value={websiteUrl}
                      onChange={(e) => setWebsiteUrl(e.target.value)}
                      placeholder="https://example.com"
                      className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[rgb(81,91,195)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
                    />
                  </div>
                )}

                {/* Condition Builder */}
                <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-900/50 rounded-xl">
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                    Alert Condition
                  </label>

                  <div className="flex flex-col sm:flex-row gap-3">
                    {/* Asset Selection */}
                    {selectedService.fields.asset && (
                      <select
                        value={selectedAsset}
                        onChange={(e) => setSelectedAsset(e.target.value)}
                        className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[rgb(81,91,195)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
                      >
                        {selectedService.fields.asset.map(asset => (
                          <option key={asset} value={asset}>{asset}</option>
                        ))}
                      </select>
                    )}

                    {/* Operator */}
                    <select
                      value={selectedOperator}
                      onChange={(e) => setSelectedOperator(e.target.value)}
                      className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[rgb(81,91,195)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
                    >
                      {selectedService.fields.operators.map(op => (
                        <option key={op} value={op}>{op}</option>
                      ))}
                    </select>

                    {/* Value */}
                    <div className="flex-1 relative">
                      <input
                        type={selectedService.fields.valueType === 'number' ? 'number' : 'text'}
                        value={alertValue}
                        onChange={(e) => setAlertValue(e.target.value)}
                        placeholder={selectedService.fields.valuePlaceholder}
                        className="w-full px-4 py-2 pr-12 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[rgb(81,91,195)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
                      />
                      {selectedService.fields.unit && (
                        <span className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 dark:text-gray-400 text-sm">
                          {selectedService.fields.unit}
                        </span>
                      )}
                    </div>
                  </div>

                  {/* Preview */}
                  <div className="mt-3 px-3 py-2 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400 rounded-lg text-sm">
                    <Sparkles className="w-4 h-4 inline mr-1" />
                    Alert when: {selectedAsset || selectedService.name} {selectedOperator} {alertValue} {selectedService.fields.unit}
                  </div>
                </div>

                {/* Advanced Settings (Collapsed by default) */}
                <button
                  onClick={() => setShowAdvanced(!showAdvanced)}
                  className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors mb-4"
                >
                  <ChevronDown className={`w-4 h-4 transition-transform ${showAdvanced ? 'rotate-180' : ''}`} />
                  Advanced Settings
                </button>

                {showAdvanced && (
                  <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-900/50 rounded-xl space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Check Frequency
                      </label>
                      <select
                        value={checkFrequency}
                        onChange={(e) => setCheckFrequency(Number(e.target.value))}
                        className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[rgb(81,91,195)] bg-white dark:bg-gray-900"
                      >
                        <option value={60}>Every minute</option>
                        <option value={300}>Every 5 minutes</option>
                        <option value={900}>Every 15 minutes</option>
                        <option value={1800}>Every 30 minutes</option>
                        <option value={3600}>Every hour</option>
                      </select>
                    </div>

                    <div className="flex items-center gap-3">
                      <input
                        type="checkbox"
                        id="recurring"
                        checked={isRecurring}
                        onChange={(e) => setIsRecurring(e.target.checked)}
                        className="w-4 h-4 text-[rgb(81,91,195)] border-gray-300 rounded focus:ring-[rgb(81,91,195)]"
                      />
                      <label htmlFor="recurring" className="text-sm text-gray-700 dark:text-gray-300">
                        Keep monitoring (recurring alert)
                      </label>
                    </div>
                  </div>
                )}
              </>
            )}

            {/* Actions */}
            <div className="flex items-center justify-between">
              <button
                onClick={() => router.push('/')}
                className="px-6 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={() => setStep(2)}
                disabled={!isStep1Valid()}
                className={`px-6 py-2 rounded-lg font-medium transition-all flex items-center gap-2 ${
                  isStep1Valid()
                    ? 'bg-[rgb(81,91,195)] text-white hover:bg-[rgb(61,71,175)]'
                    : 'bg-gray-200 dark:bg-gray-700 text-gray-400 dark:text-gray-500 cursor-not-allowed'
                }`}
              >
                Next: Choose Channels
                <ArrowRight className="w-4 h-4" />
              </button>
            </div>
          </div>
        )}

        {/* Step 2: Choose Channels */}
        {step === 2 && (
          <div className="bg-white dark:bg-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
            <div className="mb-6">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                How should we notify you?
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                Choose one or more notification channels
              </p>
            </div>

            {/* Channels Grid */}
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 mb-6">
              {channels.map(channel => {
                const Icon = channel.icon;
                const isSelected = selectedChannels.includes(channel.id);

                return (
                  <button
                    key={channel.id}
                    onClick={() => toggleChannel(channel.id)}
                    className={`relative p-4 rounded-xl border-2 transition-all ${
                      isSelected
                        ? 'border-[rgb(81,91,195)] bg-blue-50 dark:bg-blue-900/20'
                        : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                    }`}
                  >
                    {/* Checkmark */}
                    {isSelected && (
                      <div className="absolute top-2 right-2 w-6 h-6 bg-[rgb(81,91,195)] text-white rounded-full flex items-center justify-center">
                        <Check className="w-4 h-4" />
                      </div>
                    )}

                    <Icon className="w-8 h-8 mx-auto mb-2 text-gray-700 dark:text-gray-300" />
                    <div className="text-sm font-medium text-gray-700 dark:text-gray-300">
                      {channel.name}
                    </div>

                    {/* Configuration Status */}
                    {channel.configured ? (
                      <div className="text-xs text-green-600 dark:text-green-400 mt-1">
                         Configured
                      </div>
                    ) : (
                      <div className="text-xs text-gray-500 dark:text-gray-500 mt-1">
                        Setup needed
                      </div>
                    )}
                  </button>
                );
              })}
            </div>

            {/* Configuration Warning */}
            {selectedChannels.some(id => !channels.find(c => c.id === id)?.configured) && (
              <div className="mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                <p className="text-sm text-yellow-800 dark:text-yellow-400">
                  <Bell className="w-4 h-4 inline mr-1" />
                  Some channels need configuration. You'll be prompted to set them up after creating the alert.
                </p>
              </div>
            )}

            {/* Alert Summary */}
            <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-900/50 rounded-xl">
              <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Alert Summary</h3>
              <div className="space-y-1 text-sm text-gray-600 dark:text-gray-400">
                <p><strong>Alert:</strong> {alertName || `${selectedService?.name} Alert`}</p>
                <p><strong>Condition:</strong> {selectedAsset || selectedService?.name} {selectedOperator} {alertValue} {selectedService?.fields.unit}</p>
                <p><strong>Channels:</strong> {selectedChannels.map(id => channels.find(c => c.id === id)?.name).join(', ')}</p>
                <p><strong>Frequency:</strong> Every {checkFrequency / 60} minute(s)</p>
              </div>
            </div>

            {/* Actions */}
            <div className="flex items-center justify-between">
              <button
                onClick={() => setStep(1)}
                className="px-6 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors flex items-center gap-2"
              >
                <ArrowLeft className="w-4 h-4" />
                Back
              </button>
              <button
                onClick={handleCreateAlert}
                disabled={!isStep2Valid() || isLoading}
                className={`px-6 py-2 rounded-lg font-medium transition-all flex items-center gap-2 ${
                  isStep2Valid() && !isLoading
                    ? 'bg-gradient-to-r from-[rgb(81,91,195)] to-indigo-400 text-white hover:shadow-lg'
                    : 'bg-gray-200 dark:bg-gray-700 text-gray-400 dark:text-gray-500 cursor-not-allowed'
                }`}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    Creating...
                  </>
                ) : (
                  <>
                    Create Alert
                    <Check className="w-4 h-4" />
                  </>
                )}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}